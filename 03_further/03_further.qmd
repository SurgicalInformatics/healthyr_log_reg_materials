---
title: "Model building in action"
author: "HealthyR+: Practical Logistic Regression, Session 3"
date: today
format:
  html:
    code-fold: true
editor: visual
---

```{r}
#| message: false
#| warning: false


library(tidyverse)
library(broom)
library(finalfit)
library(GGally) # ggpairs function
library(pROC)   # auc statistic
library(tidymodels)
theme_set(theme_bw())


load(here::here("mydata_modified_use.rda"))
```

# Variable selection

Based on what we learned about our variables in the previous session we can start building our final model. We know that:

-   our incomplete observations are not different to the rest of the dataset.
-   our continuous variables (age, nodes) have a monotonous response to 5-year mortality (only goes in one direction).
-   our continuous variables are independent of each other, and independent of the categorical variables in our dataset.
-   we know which categorical variables are related to each other: extent to local complications.

# Model Fitting

Three things are important to keep looking at:

-   what is the association between a particular variable and the outcome (OR and 95%CI);

-   how much information is a variable bringing to the model (change in AIC and c-statistic);

-   how much influence does adding a variable have on the effect size of another variable, and in particular my variable of interest (a rule of thumb is seeing a greater than 10% change in the OR of the variable of interest when a new variable is added to the model, suggests the new variable is important).

## Multivariable model fitting 1 - start simple

Script set-up and most basic logistic regression model (fit1 from Session 2)

```{r}
fit1_smrz = colon_data %>% 
  finalfit("mort_5yr", "rx.factor", metrics = TRUE)

fit1     = fit1_smrz[[1]]
met_fit1 = fit1_smrz[[2]]
rm(fit1_smrz) # good idea to remove this to reduce typos when copying

```

## Multivariable model fitting 2 - maximal model

Create the variables `fit2_smrz`, `fit2` (first element of `finalfit(..., metrics = TRUE)`) and `met_fit2` using all of the variables from the end of Session 1.

```{r}
dependent   = "mort_5yr"
explanatory = c("rx.factor", "age", "sex.factor",
                "loccomp.factor", "differ.factor",
                "extent.factor", "surg.factor", "nodes")

fit2_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit2     = fit2_smrz[[1]]
met_fit2 = fit2_smrz[[2]]
rm(fit2_smrz)

```

Look at the `met_` variables in your Environment tab: better already, isn't it!

## Multivariable model fitting 3 - is `loccomp.factor` a mediator?

A mediator is a variable that that lies on the causal pathway between the exposure and the outcome of interest.

```{r}
# Fit 3

dependent   = "mort_5yr"
explanatory = c("rx.factor", "age", "sex.factor",
                # "loccomp.factor",
                "differ.factor",
                "extent.factor", "surg.factor", "nodes")

fit3_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit3     = fit3_smrz[[1]]
met_fit3 = fit3_smrz[[2]]
rm(fit3_smrz)


# Does treatment predict local complications?

colon_data %>% 
  finalfit("loccomp.factor", "rx.factor", metrics = TRUE)
```

## Multivariable model fitting 4 - omit `surg.factor`

Again, copy the above code and create a `fit4` where we further leave out `surg.factor` from the explanatory variable list

```{r}
# Your R code here... 

# Fit 4


```

## Multivariable model fitting 5

### Collapsing variable levels

Looks like it doesn't matter whether the tumor is in the submucosa or in the muscle, so we can collapse those levels into one and call it `fit5`:

```{r}

colon_data = colon_data %>% 
mutate(extent.factor2 = extent.factor %>%
         fct_collapse("Submucosa-Muscle" = c("Submucosa", "Muscle")))
  

dependent   = "mort_5yr"
explanatory = c("rx.factor",
                "age",
                "sex.factor",
                "differ.factor",
                "extent.factor2",
                "nodes")

fit5_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit5     = fit5_smrz[[1]]
met_fit5 = fit5_smrz[[2]]
rm(fit5_smrz)

```

### Exercise 2

Copy the above code. Collapse the differentiation variable so that "Well" and "Moderate" are now "Well-Moderate". Create fit 6 using this collapsed variable instead of `differ.factor`.

```{r}
# Your R code here...

# Fit 6

```

```{r}
# Hint: use fct_collapse 

colon_data = colon_data %>% 
  mutate(differ.factor2 = differ.factor %>%
           fct_collapse("Well-Moderate" = c("Well", "Moderate")))
```

## Multivariable model fitting 7 - Dual-agent vs single-agent/observation

```{r}

colon_data = colon_data %>% 
mutate(rx.factor2 = rx.factor %>%
         fct_collapse("Obs-Lev" = c("Obs", "Lev")))
  

dependent   = "mort_5yr"
explanatory = c("rx.factor2",
                "age",
                "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit7_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit7     = fit7_smrz[[1]]
met_fit7 = fit7_smrz[[2]]
rm(fit7_smrz)

```

Note how the metrics hardly change during this collapsing, but the coefficients do change markedly.

## Multivariable model fitting 8

### What do we do with non significant demographic variables?

We may expect age to be associated with the outcome because it so commonly is. But there is weak evidence of an association in the univariable analysis. We have shown above that the relationship of age to the outcome may not be linear, therefore we need to act on this.

We can either convert age to a categorical variable or include it with a quadratic term

```{r}
# including age as a factor 

dependent   = "mort_5yr"
explanatory = c("rx.factor2",
                "age.factor",
                "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit8_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit8     = fit8_smrz[[1]]
met_fit8 = fit8_smrz[[2]]
rm(fit8_smrz)
```

```{r}
# age as a quadratic

dependent   = "mort_5yr"
explanatory = c("rx.factor2",
                "age",
                "I(age^2)", # this is the syntax used to add the quadratic term
                "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit8_smrz_quad = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit8_quad     = fit8_smrz_quad[[1]]
met_fit8_quad = fit8_smrz_quad[[2]]
rm(fit8_smrz_quad)
```

### Do we keep demographics if they are not significant?

Variables that don't have a significant effect can still be confounding

Why are we keeping the sex variable?

```{r}

dependent   = "mort_5yr"
explanatory = c("rx.factor2",
                "age.factor",
                # "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit8_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit8     = fit8_smrz[[1]]
met_fit8 = fit8_smrz[[2]]
rm(fit8_smrz)

```

In this case, sex does not affect the final results at all, but it would be wise to keep it as it is a  well-known confounder from other trials.

## Model so far

Note `explanatory.multi` syntax to include to specify multivariable model variables included in the OR (multivariable full) column output. Explanatory multi is a useful tool for assessing whether to retain variables in a model.

```{r}
dependent   = "mort_5yr"
explanatory = c("rx.factor2", "age.factor", "sex.factor",
                "loccomp.factor", "differ.factor2",
                "extent.factor2", "surg.factor", "nodes")

explanatory.multi = c("rx.factor2",
                "differ.factor2",
                "extent.factor2",
                "nodes") # without age and sex

fit8_smrz = colon_data %>% 
  finalfit(dependent, explanatory, explanatory.multi, metrics = TRUE, keep_models = TRUE)

fit8     = fit8_smrz[[1]]
met_fit8 = fit8_smrz[[2]]
rm(fit8_smrz)

```

# Interactions

When an interaction exists between two explanatory variables, say **treatment** and **differentiation**, it implies that the size of the treatment effect on mortality, differs by differentiation. Up until now, the model as assumed that the effect of treatment on death is the same whether the cancer is well-moderately differentiated or poorly differentiated.

But it might be reasonable to hypothesise that the chemotherapy may work better on those with poorer prognosis cancers.

We can add an interaction term to the model thus:

```{r}
dependent   = "mort_5yr"

explanatory = c("rx.factor2", "age.factor", "sex.factor",
                "loccomp.factor", "differ.factor2",
                "extent.factor2", "surg.factor", "nodes")


explanatory.multi = c("rx.factor2*differ.factor2", "extent.factor2", "nodes", "age.factor", "sex.factor")

fit9_smrz = colon_data %>% 
  finalfit(dependent, explanatory, explanatory.multi, metrics = TRUE, keep_models = TRUE)

fit9     = fit9_smrz[[1]]
met_fit9 = fit9_smrz[[2]]
rm(fit9_smrz)

```

The exponentiated coefficient for the interaction is a ratio. It can be interpretted as the factor by which the odds ratio of the treatment changes when moving from the first level of the interaction variable (differentiation) to the next. This is confusing! We will discuss in detail.

## Interaction plots and prediction (advanced)

We can plot the response for the interaction to understand the interaction. This involved using `augment` which is considered advanced. A deep understanding of this is not required to complete the course.

```{r}
#| fig-width: 5
#| fig-height: 3


# Produce interaction plots by predicting from the fitted model. 

# Create a set of patient characteristics by which to predict the response.
# Take the first line of the original tibble, repeat it 4 times
# then create new columns with different levels
newdata = colon_data %>% 
  slice(rep(1, 4)) %>%
  mutate(rx.factor2     = c("Obs-Lev",       "Lev+5FU",       "Obs-Lev", "Lev+5FU"),
         differ.factor2 = c("Well-Moderate", "Well-Moderate", "Poor",    "Poor"))


# Make rownames for easy identification. 
rownames(newdata) = c("Obs-Lev/Well-Moderate", "Lev+5FU/Well-Moderate", 
                      "Obs-Lev/Poor", "Lev+5FU/Poor")

# Run the models. 
## Note, we are using finalfit::glmmulti 
dependent   = "mort_5yr"

explanatory.multi = c("rx.factor2", "age.factor","sex.factor","differ.factor2", "extent.factor2","nodes")
fit8 = colon_data %>% glmmulti(dependent, explanatory.multi)

explanatory.multi = c("rx.factor2*differ.factor2", "age.factor","sex.factor", "extent.factor2","nodes")
fit9 = colon_data %>% glmmulti(dependent, explanatory.multi)


```

```{r}

## This code is complex but you can understand it if you work through. 

fit8 %>% 
  augment(newdata = newdata, type.predict = "link") %>%
  separate(.rownames, into = c("treatment", "differentiation"), sep = "/") %>%
  mutate(
    treatment = factor(treatment, levels=c("Obs-Lev", "Lev+5FU"))) %>% 
  ggplot(aes(x = treatment, y=.fitted, group=differentiation, colour=differentiation))+
  geom_line()+
  ylab("Log-odds death")+
  ggtitle("Without interaction")

fit9 %>% 
  augment(newdata = newdata, type.predict = "link") %>%
  separate(.rownames, into = c("treatment", "differentiation"), sep = "/") %>%
  mutate(
    treatment = factor(treatment, levels=c("Obs-Lev", "Lev+5FU"))) %>% 
  ggplot(aes(x = treatment, y=.fitted, group=differentiation, colour=differentiation))+
  geom_line()+
  ylab("Log-odds death")+
  ggtitle("With interaction")

```

This interaction is not significant.

# Accounting for population stratification with random effects

We have noted previously that we should incorporate population stratification into models if available. This is important. If we have patients clustered by town, or hospital, or country, then this should be accounted for. Those patients are likely to have commonalities not captured else where in the data. If we wish the estimates for our other characteristics to be accurate, this is required.

Our models so far have included variables as `fixed effects`. We can go further and include something called `random effects`. This is useful when we have variables that we wish to account for, but not necessarily estimate directly, without losing power in the main analysis.

Turns out we actually have information on which hospitals the data was gathered from!

```{r}

load(here::here("patient_hospitals.rda"))

colon_data = colon_data %>% left_join(hospitals)

dependent   = "mort_5yr"
explanatory = c("rx.factor2",
                "age.factor",
                "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit10_smrz = colon_data %>% 
  finalfit(dependent, explanatory,
           metrics = TRUE, random_effect = "hospital")

fit10 = fit10_smrz[[1]]
met_fit10 = fit10_smrz[[2]]

```

To include a random effect, `finalfit` can't use `glm()` - it is to use `glmer()` from `library(lme4)` instead.

## Answers

### 1.

```{r}

# Fit 3

dependent   = "mort_5yr"
explanatory = c("rx.factor", "age", "sex.factor",
                # "obstruct.factor", "perfor.factor", "adhere.factor",
                # "loccomp.factor",
                "differ.factor",
                "extent.factor", "surg.factor", "nodes")

fit3_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit3     = fit3_smrz[[1]]
met_fit3 = fit3_smrz[[2]]
rm(fit3_smrz)
```

```{r}

# Fit 4

dependent   = "mort_5yr"
explanatory = c("rx.factor", "age", "sex.factor",
                # "obstruct.factor", "perfor.factor", "adhere.factor",
                # "loccomp.factor",
                "differ.factor",
                "extent.factor",
                # "surg.factor",
                "nodes")

fit4_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit4     = fit4_smrz[[1]]
met_fit4 = fit4_smrz[[2]]
rm(fit4_smrz)
```

### 2.

```{r}
# Fit 6

colon_data = colon_data %>% 
  mutate(differ.factor2 = differ.factor %>%
           fct_collapse("Well-Moderate" = c("Well", "Moderate")))
  

dependent   = "mort_5yr"
explanatory = c("rx.factor",
                "age",
                "sex.factor",
                "differ.factor2",
                "extent.factor2",
                "nodes")

fit6_smrz = colon_data %>% 
  finalfit(dependent, explanatory, metrics = TRUE)

fit6     = fit6_smrz[[1]]
met_fit6 = fit6_smrz[[2]]
rm(fit6_smrz)
```
