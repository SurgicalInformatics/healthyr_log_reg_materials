---
title: "Introduction and data exploration"
author: "HealthyR+: Practical Logistic Regression, Session 1"
date: today
format:
  html:
    code-fold: true
editor: visual
---

## What is Logistic Regression?

A regression analysis is a statistical process for estimating the relationships between variables. For instance, we may try to predict the blood pressure of a group of patients based on their age. As age and blood pressure are on a continuous scale, this is an example of linear regression.

Logistic regression is an extension of this, where the variable being predicted is *categorical*. We will deal with binary logistic regression, where the variable being predicted has two levels, e.g. yes or no, 0 or 1. In healthcare this is usually done for an event (like death) occurring or not occurring. Logistic regression can tell us the probability of the outcome occurring.

Logistic regression lets you adjust for the effects of confounding factors on an outcome. When you read a paper that says it has adjusted for confounding factors, this is the usual method which is used.

Adjusting for confounding factors allows us to isolate the true effect of a variable upon an outcome. For example, if we wanted to know the effects of smoking on deaths from heart attacks, we would need to also control for things like sex and diabetes, as we know they contribute towards heart attacks too.

![](age_bp.png)

Although in binary logistic regression the outcome must have two levels, the predictor variables (also known as the explanatory variables) can be either continuous or categorical.

Logistic regression can be performed to examine the influence of one predictor variable, which is known as a univariable analysis. Or multiple predictor variables, known as a multivariable analysis.

![](exam_pass.jpeg)

## Definitions

**Dependent** variable (in clinical research usually synonymous to **outcome**) - is what we are trying to explain, i.e. we are trying to identify the factors associated with a particular outcome. In binomial logistic regression, the dependent variable has exactly two levels (e.g. "Died" or "Alive", "Yes - Complications" or "No Complications", "Cured" or "Not Cured", etc.). Other types of logistic regression include 'ordinal', when the outcome variable has \>2 ordered levels, and 'multinomial', where the outcome variable has \>2 levels with no inherent order.

**Explanatory** variables (also known as **predictors**, **confounding** variables, or **"adjusted for"**) - patient-level information, usually including demographics (age, gender) as well as clinical information (disease stage, tumour type). Explanatory variables can be categorical as well as continuous, and categorical variables can have more than two levels.

**Univariable** - analysis with only one Explanatory variable.

**Multivariable** - analysis with more than one Explanatory variable. Synonymous to "adjusted".

(**Multivariate** - technically means more than one **Dependent variable** (we will not discuss this type of analysis), but very often used interchangeably with **Multivariable**.)

## Discussion

Why is one of the columns called univariable analysis when it clearly includes several explanatory variables?

![](globalsurg_logreg.png)

Source: Mortality of emergency abdominal surgery in high-, middle-, and low-income countries.GlobalSurg Collaborative (2016). British Journal of Surgery, 103(8), 971-988.

## Odds and probabilities

Odds and probabilities can get confusing so let's get them straight:

![](p_vs_odds2.png)

Odds and probabilities can always be interconverted. For example, if the odds of a patient dying from a disease are \`9 to 1\` then the probability of death (also known as risk) is 10%. Odds of \`1 to 1\` equal 50%.

$Odds = \frac{p}{1-p}$, where $p$ is the probability of the outcome occurring (or the circle being red).

Look at the numbers and convince yourself that this works.

## Odds ratios

For a given categorical explanatory variable (e.g. gender), the likelihood of an outcome/dependent occurring (e.g cancer) can be expressed in a ratio of odds or odds ratio , e.g. the odds of men developing cancer is 2-times that of females, odds ratio = 2.0.

![](or.png)

An alternative is a ratio of probabilities, called a risk ratio or relative risk. Odds ratios have useful mathematical characteristics and are the main expression of results in logistic regression analysis.

## Advanced: Logit function

An assumption of simple linear regression is that the residuals are normally distributed. A residual is the difference between an observation (*y*) and the prediction of that observation by the model. This doesn't mean that the dependent *Y* must be normally distributed, but it does have to be continuous, unbounded and measured on an interval or ratio scale.

Unfortunately, binary dependent variables fulfill none of these requirements.

In order to perform regression using a binary dependent variable, we are required to transform it into something more useful.

Rather than estimating $y$ = 0 or $y$ = 1 from the $x$-axis, we estimate the probability of $y$ = 1. Probabilities can only exist for values of 0 to 1. The probability scale is therefore not linear - straight lines do not make sense on it.

The odds scale runs from 0 to +∞. Probabilities from 0 to 0.5 are squashed into odds of 0 to 1, and probabilities from 0.5 to 1 have the expansive comfort of 1 to +∞.

This is why we fit binary data on a ***log-odds scale*****.**

A log-odds scale sounds incredibly off-putting to non-mathematicians, but it is the perfect solution.

-   Log-odds run from −∞ to +∞;

-   odds of 1 become log-odds of 0;

-   a doubling and a halving of odds represent the same distance on the scale.

In this case we, we use a **logit transformation** to convert $y$ to **log-odds**. Log-odds are continuous, unbounded and measured on an interval, therefore work well for regression.

### Logit function

$\log_e (\frac{p}{1-p})$, where $p$ is the probability of the outcome occurring.

The logit function is the natural log of the odds that *Y* equals one of the categories.

Credit: <http://www.theanalysisfactor.com/what-is-logit-function/>

The fitted lines from a regression model of cardiovascular event by coffee consumption, stratified by smoking can be seen below on the log-odds scale (A) and the probability scale (B).

![](2_prob_logodds.png)

Below we can see the logistic regression equation, the fitted lines on the probability scale, and the output from a standard base R analysis. The dots at the top and bottom of the plot represent individual patients who have had an event or not. The fitted line, therefore, represents the point-to-point probability of a patient with a particular set of characteristics having the event or not.

It is straightforward to convert these to odds ratios, a measure we can use to communicate effect size and direction effectively. To get the odds ratio, we taje the exponential of the coefficient on the log-odds scale.

For a continuous variable such as cups of coffee consumed, the odds ratio is the change in odds of a CV event associated with a 1 cup increase in coffee consumption. We are dealing with linear responses here, so the odds ratio is the same for an increase from 1 to 2 cups, or 3 to 4 cups etc. Remember that if the odds ratio for 1 unit of change is 1.5, then the odds ratio for 2 units of change is $exp(log(1.5)*2) = 2.25$

For a categorical variable such as smoking, the odds ratio is the change in odds of a CV event associated with smoking compared with not smoking (the reference level).

![](4_equation.png)

# Data preparation and exploration

## Load data and packages

```{r}
#| message: false

library(tidyverse)
library(finalfit)
library(knitr)
library(ggdag)

theme_set(theme_bw())

# Load dataset
load("healthyr_colon_dataset.rda")
colon_data = mydata
rm(mydata)
```

For more information and examples see finalfit.org

N.B

`#|` precedes an *executable option* used in Quarto. These are used for chunk settings. You will see them going forward in this Quarto document.

(In an R markdown document you would see the settings presented inside the curly brackets e.g. `{r, echo = FALSE}`).

## Data wrangling: The importance of understanding and recoding your data

Move your cursor to `# survival::colon` inside the chunk and click F1 to see the data dictionary.

```{r}

# survival::colon 

# recode the data

colon_data = colon_data %>% 
  mutate(sex.factor = sex %>% 
           factor() %>% 
           fct_recode("Female" = "0",
                      "Male"   = "1") %>% 
           ff_label("Sex"),
         
         rx.factor = rx %>% 
           factor() %>% 
           ff_label("Treatment"),
         
         obstruct.factor = obstruct %>% # obstruction of colon by tumour
           factor() %>% 
           fct_recode("No"  = "0",
                      "Yes" = "1") %>% 
           ff_label("Obstruction"),
         
         perfor.factor = perfor %>% # perforation of colon
           factor() %>% 
           fct_recode("No"  = "0",
                      "Yes" = "1") %>% 
           ff_label("Perforation"),
         
         adhere.factor = adhere %>% # adherence to nearby organs by tumour
           factor() %>% 
           fct_recode("No"  = "0",
                      "Yes" = "1") %>% 
           ff_label("Adherence"),
         
         differ.factor = differ %>% # differentiation of tumour
           factor() %>% 
           fct_recode("Well"     = "1",
                      "Moderate" = "2",
                      "Poor"     = "3") %>% 
           ff_label("Differentiation"),
         
         extent.factor = extent %>% # Extent of local spread 
           factor() %>% 
           fct_recode("Submucosa"           = "1",
                      "Muscle"              = "2",
                      "Serosa"              = "3",
                      "Adj. struct."        = "4") %>% 
           ff_label("Extent of spread"),
         
         surg.factor = surg %>% #	time from surgery to registration
           factor() %>% 
           fct_recode("Short" = "0",
                      "Long"  = "1") %>% 
           ff_label("Time from surgery"),
         
         node4.factor = node4 %>% # more than 4 positive lymph nodes
           factor() %>% 
           fct_recode("No"  = "0",
                      "Yes" = "1") %>% 
           ff_label(">4 positive nodes"),
         
         status.factor = status %>% # status - Died or Censored
           factor() %>% 
           fct_recode("Alive"  = "0",
                      "Died"   = "1") %>% 
           ff_label("Status"))



```

## Data exploration and plotting

Below is a clever piece of code, especially `pivot_longer(cols = where(is.factor))`: we select all variables that are factors (categorical variables in R) into the same column which then makes it easy to plot all with just one ggplot call (and still put them on separate plots with `facet_wrap(~name)`). `name` is the default name `pivot_longer` gives the column that includes all the chosen columns. You could, for example, do `pivot_longer(cols = is.factor, names_to = "all_my_factors")` and `facet_wrap(~all_my_factors)`.

```{r}
#| warning: false
#| fig-width: 10
#| fig-height: 5

colon_data %>%
  pivot_longer(cols = where(is.factor)) %>%
  ggplot(aes(value)) +
  facet_wrap(~name, scales = "free", ncol = 3) +
  geom_bar(aes(fill = value), show.legend = F) +
  coord_flip()

```

Naming the columns of interest also works (unfortunately can't use is.numeric as that includes all the original 0-1 variables):

```{r}
#| echo: false
#| message: false
#| fig-height: 2


colon_data %>%
  pivot_longer(cols = c(nodes, age, time)) %>% 
  ggplot(aes(value)) +
  facet_wrap(~name, scales = "free", ncol = 3) +
  geom_histogram(alpha = 0.6)

```

### Exercise 1

Create a plot of the `time` variable only, panelled by `status.factor`. Hint: copy the code above and change `value` to `time`.

How would you plot time in years, not days? Hint: Divide the number of days by 365.

```{r}
#| echo: false
#| message: false
#| fig-height: 2

# your R code here:


```

Discuss in pairs what this plot shows us.

## Derive new variables

```{r}

colon_data = colon_data %>% 
  mutate(age.factor = age %>% # in years
           cut(breaks = c(0,40,60,95), include.lowest = TRUE, right=FALSE,
               labels = c("<40 years", "40-59 years", "60+ years")) %>% 
           ff_label("Age"))


# local complications:
# (if either perforation or obstruction is Yes, localcomp is Yes)
colon_data = colon_data %>% 
  mutate(loccomp.factor = if_else(perfor.factor == "Yes" | obstruct.factor == "Yes" | adhere.factor == "Yes",
                           "Yes",
                           "No") %>% 
           factor() %>% 
           ff_label("Local complications"))


colon_data = colon_data %>%
  mutate(time.years = (time/365) %>% 
           ff_label("Time (years)"))

```

And now the tricky one: creating a 5-year mortality variable:

```{r}
#| fig-width: 4
#| fig-height: 3

#If the follow-up time is longer than 5 years, then the patient must have been alive at 5 years:
colon_data = colon_data %>%
  mutate(mort_5yr = if_else(time.years >= 5,
                            "Alive",
                            "Died or Censored"))

colon_data %>% 
  ggplot(aes(x = time.years, y = mort_5yr)) +
  geom_point()
```

So a single `if_else()` is not enough here - need to separate the Died or Censored. We can do it using the `case_when()` (or alternatively, write multiple nested `if_else()` statements, or create the variable step-by-step using multiple columns).

```{r}
#| fig-width: 4
#| fig-height: 3

# If follow-up time is less that 5 years, need to check whether they Died
# or were Alive (follow-up ended at <5 years)
colon_data = colon_data %>%
  mutate(mort_5yr = case_when(time.years >= 5 ~ "Alive" ,
                              time.years < 5 & status.factor == "Died"  ~ "Died",
                              time.years < 5 & status.factor == "Alive" ~ "Censored",
                              .default = "Other"
                            ))

colon_data %>% 
  ggplot(aes(x = time.years, y = mort_5yr)) +
  geom_point()

```

There should be no patients classified as Other - as it would mean we've made a mistake in the conditions, or some have the time or status missing. But `.default = "Other"` can be supplied to `case_when()`, which is the value assigned when none of the our conditions match. So think of the last line like "Everything else", or "Everything that is left".

Because logistic regression wants a variable with two levels, we'll change the third level - "Censored" - to NA. This way only the two explicit levels - "Alive" or "Died" will be used. We will also make it into a factor and give it a label.

```{r}

colon_data = colon_data %>% 
  mutate(mort_5yr =  mort_5yr %>% 
           na_if("Censored") %>% 
           factor() %>% 
           ff_label("5-yr mort.")
         )

```

## Exercise 2

Create a new derived variable called `age.10` which is age divided by 10 (so a 65 year-old is 6.5). Hint: use mutate to create a new variable and divide age by 10.

```{r}
#| echo: false

# your R code here:


```

# What about logistic regression?

After the break, we will start exploring model modelling.

Here is a quick introduction our own `finalfit` package.

`finalfit` provides functions to perform univariable and multivariable logistic regression analyses, and to produce publication standard tables and odds ratio plots.

The function `summary_factorlist` produces table summarising a dependent variable by any number of explanatory variables. It requires, 1. a dataframe, 2. a dependent, 3. explanatory variables. There are options which can be seen in the Help tab (press F1 on `summary.factorlist`).

This is usually what is required for Table 1 in a paper. Explore here to see how it works:

```{r}
#| warning: false
#| message: false


library(finalfit)

dependent='rx.factor'
explanatory = c("age", "sex.factor",
                # "obstruct.factor", "perfor.factor", "adhere.factor",
                "loccomp.factor", "differ.factor",
                "extent.factor", "surg.factor", "nodes")

demographics_table = colon_data %>% summary_factorlist(dependent, explanatory,
                               p = TRUE, na_include = TRUE, cont = "median")
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 5


demographics_table %>% 
kable(row.names = FALSE, align = c("l", "l", "r", "r", "r", "r"))
```

`finalfit` is also a function. This produces a `summary.factorlist` table, together with a univariable and multivariable logistic regression analysis. In the next session we will explore how to perform these analyses formally.

```{r}
#| echo: false
#| message: false
#| warning: false


dependent   = "mort_5yr"
explanatory = c("rx.factor", "age", "sex.factor",
                # "obstruct.factor", "perfor.factor", "adhere.factor",
                "loccomp.factor", "differ.factor",
                "extent.factor", "surg.factor", "nodes")

logreg_results = colon_data %>% 
  finalfit(dependent, explanatory)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 5

logreg_results %>% 
  kable(row.names = FALSE,  align = c("l", "l", "r", "r", "r", "r"))
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 5

colon_data %>% 
  or_plot(dependent, explanatory)

```

## Answers

### 1.

```{r}
#| execute: false 

# time against status 
colon_data %>% 
  ggplot(aes(time)) +
  facet_wrap(~status.factor) +
  geom_histogram(bins = 30, alpha = 0.6) +
  labs(x = "Time (Days)")

# time in years
colon_data %>% 
  ggplot(aes(time/365)) +
  facet_wrap(~status.factor) +
  geom_histogram(bins = 30, alpha = 0.6) +
  labs(x = "Time (Years)")
```

### 2.

```{r}
#| execute: false 

colon_data = colon_data %>% 
  mutate(age.10 = (age/10) %>% 
           ff_label("Age/10yr")) 

```
